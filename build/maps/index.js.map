{"version":3,"sources":["index.js"],"names":["isArray","val","isFunction","isString","type","isObject","isDomElement","filter","bars","loading","isNumber","objTypeof","over","trigger","_getGroups","dataAry","idf","nsons","ostate","jj","opts","indexcode","push","o","parent","forEach","son","ii","idrecode","index","oriItem","data","oldKey","key","concat","updateTreeKeys","control","findParents","_parentIndex","myParents","LOADING","find","item","state","curState","p","content","oldkey","newKey","saxer","get","treeKeys","hashKey","splice","arguments","length","undefined","uniqueId","prefix","PULLDOWN","params","set","datas","pulldown","parentIndex","hkey","part","myData","myKeys","startIndex","itemKey","getHashKey","valideIndex","depth","belong","React","isValidElement","newItem","title","_setSubItemKey","setSubItemKey","_setSubItemKey2","_slicedToArray","subItemKeys","sons","_liKeys","_bodyKeys","indexOf","_dotKeys","setItemKey","liKeys","liData","li","body","_setItemKey9","_setItemKey10","bodyKeys","bodyData","footer","_setItemKey11","_setItemKey12","ftKeys","ftData","_ftKeys","dot","dotKeys","dotData","itemKeys","_toConsumableArray","props","treeInitData","treeX","Tree","Actions","saveTreeKeys","extend","setProps","findIndex","this","setConfig","_setItemKey19","config","_setItemKey20","update","$update","append","prepend","$prepend","delete","$delete","$loading","loaded","keyItem","getGroups","feather","temp","$id","sonFeather","getParents","findAndUpdate","query","target","dispach","tree","dft","header","itemClass","listClass","itemMethod","autoinject","rendered","App","pure","Aotoo","list","transTree","merge","obj","createElement","className","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","preRender","bind","list_part","getBehaviorBar","Component","UPDATE","oriData","treeData","APPEND","_setItemKey3","_setItemKey4","oTreeKeys","DELETE","LOADED","appendData","PREPEND","prependData","TRIGGER"],"mappings":"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","file":"../index.js","sourcesContent":["\nconst {\n  list,\n  objTypeof,\n  transTree,\n  find,\n  findIndex,\n  merge,\n  isArray,\n  isFunction,\n  isString,\n  isObject,\n  isDomElement,\n  uniqueId,\n  filter\n} = Aotoo\n\nconst isNumber = function (obj) {\n  return objTypeof(obj) == 'Number'\n}\n\nconst bars = {\n    trigger:  <div className=\"treex-bar\"><div className=\"treex-trigger-bar\">加载更多内容</div></div>\n  , pulldown: <div className=\"treex-bar\"><div className=\"treex-pull-bar\">刷新页面</div></div>\n  , loading:  <div className=\"treex-bar\"><div className=\"treex-loading\">Loading...</div></div>\n  , over:     <div className=\"treex-bar\"><div className=\"treex-over-bar\">没有更多内容了</div></div>\n}\n\nfunction getBehaviorBar(type, val){\n  if (val) {\n    switch (type) {\n      case 'pulldown':\n        return val == true ? bars.pulldown : val\n        break;\n      case 'loading':\n        return val == true ? bars.loading : val\n        break;\n      case 'over':\n        return val == true ? bars.over : val\n        break;\n      case 'trigger':\n        return val == true ? bars.trigger : val\n        break;\n    }\n  }\n}\n\nclass Tree extends React.Component {\n  constructor(props){\n    super(props)\n    this.preRender = this::this.preRender\n    this.state = {\n      data: this.props.data || [],\n      pulldown: this.props.pulldown || false,\n      loading: this.props.loading || false,\n      trigger: this.props.trigger || false,\n      over: this.props.over || false\n    }\n  }\n\n  preRender(){\n    const header = this.props.header ? this.props.header : ''\n    const footer = this.props.footer ? this.props.footer : ''\n\n    const list_part = list({\n      data: transTree(this.state.data),\n      listClass: this.props.listClass,\n      itemClass: this.props.itemClass,\n      itemMethod: this.props.itemMethod\n    })\n\n    if (\n      header ||\n      footer ||\n      this.state.trigger ||\n      this.state.pulldown ||\n      this.state.loading ||\n      this.state.over\n    ) {\n      return (\n        <div className=\"list-container\">\n          {getBehaviorBar('pulldown', this.state.pulldown)}\n          {header}\n          {list_part}\n          {footer}\n          {getBehaviorBar('trigger', this.state.trigger)}\n          {getBehaviorBar('over', this.state.over)}\n          {getBehaviorBar('loading', this.state.loading)}\n        </div>\n      )\n    } else {\n      return list_part\n    }\n  }\n\n  render(){\n    return this.preRender()\n  }\n}\n\nconst Actions = {\n  UPDATE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n\n    const index = opts.index\n    if (!index && index!=0) {\n      if (isArray(opts.data)) {\n        const [treeKeys, treeData] = setItemKey(opts.data)\n        control.saxer.set('treeKeys', treeKeys)\n        state.data = treeData\n        return state\n      }\n    } else {\n      let oriData = data[index]\n      let oldKey = oriData.key\n      let newKey = getHashKey()\n      updateTreeKeys(control, oldKey, newKey)\n      state.data[index] = merge(oriData, opts.data, {key: newKey})\n      return state\n    }\n  },\n\n  APPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let appendData = [].concat(opts.data || [])\n    // appendData.startIndex = oTreeKeys.length\n\n    const [treeKeys, treeData] = setItemKey(appendData)\n    oTreeKeys = oTreeKeys.concat(treeKeys)\n    control.saxer.set('treeKeys', oTreeKeys)\n    data = data.concat(treeData)\n\n    state.data = data\n    return state\n  },\n\n  PREPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let prependData = [].concat(opts.data || [])\n\n    const [treeKeys, treeData] = setItemKey(prependData)\n    oTreeKeys = treeKeys.concat(oTreeKeys)\n    \n    control.saxer.set('treeKeys', oTreeKeys)\n    data = treeData.concat(data)\n\n    state.data = data\n    return state\n  },\n\n  /*\n    opts:{\n      index: {number}\n      query: {Json}\n    }\n  */\n  DELETE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n\n    if (opts.index || opts.index == 0) {\n      let oriItem = data[opts.index] \n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(opts.index, 1);\n      }\n    }\n    else if(opts.query) {\n      const index = findIndex(data, opts.query)\n      let oriItem = data[index]\n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(index, 1)\n      }\n    }\n    state.data = data\n    return state\n  },\n\n  // ========== 状态控制 ===========\n\n  LOADING: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = opts.loading || true\n      state.pulldown = false\n    }\n    return state\n  },\n\n  LOADED: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = false\n      state.pulldown = false\n    }\n    return state\n  },\n\n  OVER: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.trigger = false\n    state.over = opts.over || true\n    return state\n  },\n\n  PULLDOWN: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.over = false\n    state.pulldown = opts.pulldown || true\n    return state\n  },\n\n  TRIGGER: function(ostate, opts={}){\n    if (!this||!this.state) return\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.over = false\n    state.trigger = opts.trigger || true\n    return state\n  },\n}\n\nlet idrecode = []\nlet indexcode = []\nfunction _getGroups(dataAry, idf){\n  let nsons = []\n\n  let sons = filter(dataAry, (o, jj) => {\n    if (o.parent == idf) {\n      indexcode.push(jj)\n      return o.parent == idf\n    }\n  })\n\n  sons.forEach( (son, ii) => {\n    if (son.idf && idrecode.indexOf(son.idf) == -1) {\n      idrecode.push(son.idf)\n      nsons = nsons.concat(son).concat(_getGroups(dataAry, son.idf))\n    } else {\n      nsons = nsons.concat(son)\n    }\n  })\n  return nsons\n}\n\n// let myParentsIndex = []\n// let myParents = []\n\n/**\n * [查找特定idf的数据，]\n * @param  {[type]} dataAry [description]\n * @param  {[type]} idf     [description]\n * @return {[type]}         [description]\n */\nfunction findParents(dataAry, idf){\n  let _parentIndex\n  const myParents = []\n  const item = find(dataAry, (o,ii)=>o.idf==idf)\n\n  if (item && item.parent) {\n    const p = find(dataAry, (o, ii)=>{\n      _parentIndex = ii\n      return o.idf==item.parent\n    })\n    if (p){\n      myParents.push({index: _parentIndex, content: p})\n      myParents.concat(findParents(dataAry, item.parent))\n    }\n  }\n  return myParents\n}\n\nfunction updateTreeKeys(control, oldkey, newKey) {\n  const treeKeys = control.saxer.get('treeKeys')\n  let ii = findIndex(treeKeys, {hashKey: oldkey})\n  if (newKey) {\n    treeKeys[ii].key = newKey\n  } else {\n    treeKeys.splice(ii, 1);\n  }\n}\n\nfunction valideIndex(index) {\n  return index || index == 0 ? true : false\n}\n\nfunction getHashKey(prefix=\"treex_\") {\n  return uniqueId(prefix)\n}\n\nfunction saveTreeKeys(control, params) {\n  if (params.length) {\n    control.saxer.set('treeKeys', params)\n  }\n}\n\nfunction setItemKey(datas=[], depth=0, parentIndex, hkey, part) {\n  const myData = []\n  const myKeys = []\n  let start = datas.startIndex||0\n\n  for (let ii = 0, jj = start; ii < datas.length; ii++, jj++) {\n    let item = datas[ii]\n    const itemKey = getHashKey()\n    let keyItem = valideIndex(parentIndex)\n    // ? { index: jj, hashKey: itemKey, depth: depth, belong: { index: parentIndex, hashKey: hkey, part: part } }\n    ? { index: jj, hashKey: itemKey, depth: depth, belong: { hashKey: hkey, part: part } }\n    : { index: jj, hashKey: itemKey, depth: depth}\n    myKeys.push(keyItem)\n\n    if (isString(item) || isNumber(item) || React.isValidElement(item)) {\n      const newItem = {title: item, key: itemKey}\n      myData.push(newItem)\n    } \n    else if (isObject(item)) {\n      item.key = item.key||itemKey\n      const [subItemKeys, newItem] = setSubItemKey(item, jj, itemKey, ++depth)\n      myKeys.concat(subItemKeys)\n      myData.push(newItem)\n    }\n  }\n  \n  return [myKeys, myData]\n}\n\nfunction setSubItemKey(item, index, hashKey, depth) {\n  let _liKeys=[], _bodyKeys=[], _ftKeys=[], _dotKeys=[]\n  if (item.li) {\n    let li = [].concat(item.li)\n    let [liKeys, liData] = setItemKey(li, depth, index, hashKey, 'li')\n    _liKeys = liKeys\n    item.li = liData\n  }\n\n  if (item.body) {\n    let body = [].concat(item.body)\n    let [bodyKeys, bodyData] = setItemKey(body, depth, index, hashKey, 'body')\n    _bodyKeys = bodyKeys\n    item.body = bodyData\n  }\n\n  if (item.footer) {\n    let footer = [].concat(item.footer)\n    let [ftKeys, ftData] = setItemKey(footer, depth, index, hashKey, 'footer')\n    _ftKeys = ftKeys\n    item.footer = ftData\n  }\n\n  if (item.dot) {\n    let dot = [].concat(item.dot)\n    let [dotKeys, dotData] = setItemKey(dot, depth, index, hashKey, 'dot')\n    _dotKeys = dotKeys\n    item.dot = dotData\n  }\n\n  const itemKeys = [..._liKeys, ..._bodyKeys, ..._ftKeys, ..._dotKeys]\n  return [itemKeys, item]\n}\n\nfunction App(opts){\n  const [treeKeys, treeInitData] = setItemKey(opts.props.data)\n  opts.props.data = treeInitData\n  const treeX = Aotoo(Tree, Actions, opts)\n  saveTreeKeys(treeX, treeKeys)\n  treeX.extend({\n    // 重写setProps方法\n    setProps: function (props = {}) {\n      if (props.data) {\n        const [treeKeys, treeInitData] = setItemKey(props.data)\n        props.data = treeInitData\n        saveTreeKeys(this, treeKeys)\n        this.config.props = props\n      }\n    },\n    // 重写setConfig方法\n    setConfig: function (config = {}) {\n      if (config.props && config.props.data) {\n        const [treeKeys, treeInitData] = setItemKey(config.props.data)\n        config.props.data = treeInitData\n        saveTreeKeys(this, treeKeys)\n        this.config = config\n      }\n    },\n    update: function(params) {\n      this.$update(params)\n    },\n    append: function(params) {\n      this.$append(params)\n    },\n    prepend: function(params) {\n      this.$prepend(params)\n    },\n    delete: function(params) {\n      this.$delete(params)\n    },\n    loading: function(params) {\n      this.$loading(params)\n    },\n    loaded: function(params) {\n      this.$loaded(params)\n    },\n    over: function(params) {\n      this.$over(params)\n    },\n    pulldown: function(params) {\n      this.$pulldown(params)\n    },\n    trigger: function(params) {\n      this.$trigger(params)\n    },\n    /**\n     * data {Array} 完整的数据\n     * idf  {String}  指定父级id\n     * feather  {Boolean}  true = 是否返回完整数据，false = 返回完整的ID\n     */\n    getGroups: function(data, idf, feather){\n      data = data||this.data||[]\n      idrecode = []\n      indexcode = []\n      const index = findIndex(data, o=>o.idf==idf)\n      indexcode.push(index)\n      let groups = _getGroups(data||[], idf)\n      // if (feather) return groups\n      if (feather) {\n        let temp = []\n        indexcode.forEach( $id => {\n          let sonFeather = data[$id]\n          sonFeather['__index'] = $id\n          temp.push(sonFeather)\n        })\n        return temp\n      }\n      return indexcode\n    },\n\n    getParents: function(data, idf){\n      data = data||this.data||[]\n      return findParents(data, idf)\n    },\n\n    findAndUpdate: function(query, target){\n      const data = this.data||[]\n      if (query) {\n        const index = findIndex(data, query)\n        if (index) {\n          this.dispach('UPDATE', {\n            index: index,\n            data: target\n          })\n        }\n      }\n    }\n  })\n  return treeX\n}\n\nexport default function tree(opts){\n  let dft = {\n    props: {\n      data: [],\n      loading: false,\n      header: '',\n      footer: '',\n      itemClass: '',\n      listClass: '',\n      itemMethod: ''\n    },\n    theme: '',\n    autoinject: true,\n    rendered: ''\n  }\n  dft = merge(dft, opts)\n  return App(dft)\n}\n\nexport function pure(opts){\n  return tree(opts)\n}\n"]}