{"version":3,"sources":["index.js"],"names":["isArray","val","isFunction","isString","type","isObject","isDomElement","filter","bars","loading","isNumber","objTypeof","over","trigger","DELETE","dataAry","ostate","nsons","o","jj","state","idf","indexcode","data","oTreeKeys","control","forEach","son","ii","oriItem","tIndex","idrecode","push","oldKey","key","concat","_getGroups","updateTreeKeys","findParents","_parentIndex","myParents","LOADING","find","item","parent","curState","opts","p","index","content","oldkey","newKey","saxer","get","treeKeys","hashKey","splice","arguments","length","undefined","uniqueId","prefix","PULLDOWN","params","set","setItemKey","datas","depth","parentIndex","hkey","part","myData","myKeys","startIndex","getHashKey","valideIndex","itemKey","belong","keyItem","React","isValidElement","newItem","title","setSubItemKey","subItemKeys","sons","indexOf","_ftKeys","_dotKeys","li","_liKeys","liKeys","liData","body","_setItemKey9","_setItemKey10","_slicedToArray","bodyKeys","bodyData","_bodyKeys","footer","_setItemKey11","_setItemKey12","ftKeys","ftData","_setItemKey13","dot","_setItemKey14","dotKeys","dotData","itemKeys","_toConsumableArray","App","_setItemKey15","props","_setItemKey16","treeInitData","treeX","Aotoo","Tree","Actions","saveTreeKeys","extend","setProps","findIndex","_setItemKey17","_setItemKey18","this","config","setConfig","_setItemKey19","_setItemKey20","update","$append","prepend","$prepend","delete","$delete","$loading","loaded","start","$over","pulldown","temp","$id","sonFeather","getParents","findAndUpdate","query","target","dispach","tree","dft","header","itemClass","listClass","itemMethod","rendered","pure","list","transTree","merge","obj","createElement","className","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","preRender","bind","list_part","getBehaviorBar","Component","UPDATE","oriData","treeData","APPEND","_setItemKey3","_setItemKey4","attr","data-treeid","appendData","LOADED","OVER","PREPEND"],"mappings":"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","file":"../index.js","sourcesContent":["\nconst {\n  list,\n  objTypeof,\n  transTree,\n  find,\n  findIndex,\n  merge,\n  isArray,\n  isFunction,\n  isString,\n  isObject,\n  isDomElement,\n  uniqueId,\n  filter\n} = Aotoo\n\nconst isNumber = function (obj) {\n  return objTypeof(obj) == 'Number'\n}\n\nconst bars = {\n    trigger:  <div className=\"treex-bar\"><div className=\"treex-trigger-bar\">加载更多内容</div></div>\n  , pulldown: <div className=\"treex-bar\"><div className=\"treex-pull-bar\">刷新页面</div></div>\n  , loading:  <div className=\"treex-bar\"><div className=\"treex-loading\">Loading...</div></div>\n  , over:     <div className=\"treex-bar\"><div className=\"treex-over-bar\">没有更多内容了</div></div>\n}\n\nfunction getBehaviorBar(type, val){\n  if (val) {\n    switch (type) {\n      case 'pulldown':\n        return val == true ? bars.pulldown : val\n        break;\n      case 'loading':\n        return val == true ? bars.loading : val\n        break;\n      case 'over':\n        return val == true ? bars.over : val\n        break;\n      case 'trigger':\n        return val == true ? bars.trigger : val\n        break;\n    }\n  }\n}\n\nclass Tree extends React.Component {\n  constructor(props){\n    super(props)\n    this.preRender = this::this.preRender\n    this.state = {\n      data: this.props.data || [],\n      pulldown: this.props.pulldown || false,\n      loading: this.props.loading || false,\n      trigger: this.props.trigger || false,\n      over: this.props.over || false\n    }\n  }\n\n  preRender(){\n    const header = this.props.header ? this.props.header : ''\n    const footer = this.props.footer ? this.props.footer : ''\n\n    const list_part = list({\n      data: transTree(this.state.data),\n      listClass: this.props.listClass,\n      itemClass: this.props.itemClass,\n      itemMethod: this.props.itemMethod\n    })\n\n    if (\n      header ||\n      footer ||\n      this.state.trigger ||\n      this.state.pulldown ||\n      this.state.loading ||\n      this.state.over\n    ) {\n      return (\n        <div className=\"list-container\">\n          {getBehaviorBar('pulldown', this.state.pulldown)}\n          {header}\n          {list_part}\n          {footer}\n          {getBehaviorBar('trigger', this.state.trigger)}\n          {getBehaviorBar('over', this.state.over)}\n          {getBehaviorBar('loading', this.state.loading)}\n        </div>\n      )\n    } else {\n      return list_part\n    }\n  }\n\n  render(){\n    return this.preRender()\n  }\n}\n\nconst Actions = {\n  UPDATE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n\n    const index = opts.index\n    if (!index && index!=0) {\n      if (isArray(opts.data)) {\n        const [treeKeys, treeData] = setItemKey(opts.data)\n        control.saxer.set('treeKeys', treeKeys||[])\n        state.data = treeData\n        return state\n      }\n    } else {\n      let oriData = data[index]\n      let oldKey = oriData.key\n      let newKey = getHashKey()\n      updateTreeKeys(control, oldKey, newKey)\n      state.data[index] = merge(oriData, opts.data, {key: newKey})\n      return state\n    }\n  },\n\n  APPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let appendData = [].concat(opts.data || [])\n    // appendData.startIndex = oTreeKeys.length\n\n    const [treeKeys, treeData] = setItemKey(appendData)\n    oTreeKeys = oTreeKeys.concat(treeKeys)\n    control.saxer.set('treeKeys', oTreeKeys||[])\n    data = data.concat(treeData)\n\n    state.data = data\n    return state\n  },\n\n  PREPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let prependData = [].concat(opts.data || [])\n\n    const [treeKeys, treeData] = setItemKey(prependData)\n    oTreeKeys = treeKeys.concat(oTreeKeys)\n    \n    control.saxer.set('treeKeys', oTreeKeys||[])\n    data = treeData.concat(data)\n\n    state.data = data\n    return state\n  },\n\n  /*\n    opts:{\n      index: {number}\n      query: {Json}\n    }\n  */\n  DELETE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n\n    if (opts.index || opts.index == 0) {\n      const tIndex = findIndex(data, {attr: {'data-treeid': opts.index}})\n\n      let oriItem = data[tIndex] \n      // let oriItem = data[opts.index] \n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(tIndex, 1);\n      }\n    }\n    else if(opts.query) {\n      const index = findIndex(data, opts.query)\n      let oriItem = data[index]\n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(index, 1)\n      }\n    }\n    state.data = data\n    return state\n  },\n\n  // ========== 状态控制 ===========\n\n  LOADING: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = opts.loading || true\n      state.pulldown = false\n    }\n    return state\n  },\n\n  LOADED: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = false\n      state.pulldown = false\n    }\n    return state\n  },\n\n  OVER: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.trigger = false\n    state.over = opts.over || true\n    return state\n  },\n\n  PULLDOWN: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.over = false\n    state.pulldown = opts.pulldown || true\n    return state\n  },\n\n  TRIGGER: function(ostate, opts={}){\n    if (!this||!this.state) return\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.over = false\n    state.trigger = opts.trigger || true\n    return state\n  },\n}\n\nlet idrecode = []\nlet indexcode = []\nfunction _getGroups(dataAry, idf){\n  let nsons = []\n\n  let sons = filter(dataAry, (o, jj) => {\n    if (o.parent == idf) {\n      indexcode.push(jj)\n      return o.parent == idf\n    }\n  })\n\n  sons.forEach( (son, ii) => {\n    if (son.idf && idrecode.indexOf(son.idf) == -1) {\n      idrecode.push(son.idf)\n      nsons = nsons.concat(son).concat(_getGroups(dataAry, son.idf))\n    } else {\n      nsons = nsons.concat(son)\n    }\n  })\n  return nsons\n}\n\n// let myParentsIndex = []\n// let myParents = []\n\n/**\n * [查找特定idf的数据，]\n * @param  {[type]} dataAry [description]\n * @param  {[type]} idf     [description]\n * @return {[type]}         [description]\n */\nfunction findParents(dataAry, idf){\n  let _parentIndex\n  const myParents = []\n  const item = find(dataAry, (o,ii)=>o.idf==idf)\n\n  if (item && item.parent) {\n    const p = find(dataAry, (o, ii)=>{\n      _parentIndex = ii\n      return o.idf==item.parent\n    })\n    if (p){\n      myParents.push({index: _parentIndex, content: p})\n      myParents.concat(findParents(dataAry, item.parent))\n    }\n  }\n  return myParents\n}\n\nfunction updateTreeKeys(control, oldkey, newKey) {\n  const treeKeys = control.saxer.get('treeKeys')\n  let ii = findIndex(treeKeys, {hashKey: oldkey})\n  if (newKey) {\n    treeKeys[ii].key = newKey\n  } else {\n    treeKeys.splice(ii, 1);\n  }\n}\n\nfunction valideIndex(index) {\n  return index || index == 0 ? true : false\n}\n\nfunction getHashKey(prefix=\"treex_\") {\n  return uniqueId(prefix)\n}\n\nfunction saveTreeKeys(control, params) {\n  params = params ? [].concat(params) : []\n  control.saxer.set('treeKeys', params)\n  // if (params.length) {\n  // }\n}\n\nfunction setItemKey(datas=[], depth=0, parentIndex, hkey, part) {\n  const myData = []\n  const myKeys = []\n  let start = datas.startIndex||0\n\n  for (let ii = 0, jj = start; ii < datas.length; ii++, jj++) {\n    let item = datas[ii]\n    const itemKey = getHashKey()\n    let keyItem = valideIndex(parentIndex)\n    // ? { index: jj, hashKey: itemKey, depth: depth, belong: { index: parentIndex, hashKey: hkey, part: part } }\n    ? { index: jj, hashKey: itemKey, depth: depth, belong: { hashKey: hkey, part: part } }\n    : { index: jj, hashKey: itemKey, depth: depth}\n    myKeys.push(keyItem)\n\n    if (isString(item) || isNumber(item) || React.isValidElement(item)) {\n      const newItem = {title: item, key: itemKey}\n      myData.push(newItem)\n    } \n    else if (isObject(item)) {\n      item.key = item.key||itemKey\n      const [subItemKeys, newItem] = setSubItemKey(item, jj, itemKey, ++depth)\n      myKeys.concat(subItemKeys)\n      myData.push(newItem)\n    }\n  }\n  \n  return [myKeys, myData]\n}\n\nfunction setSubItemKey(item, index, hashKey, depth) {\n  let _liKeys=[], _bodyKeys=[], _ftKeys=[], _dotKeys=[]\n  if (item.li) {\n    let li = [].concat(item.li)\n    let [liKeys, liData] = setItemKey(li, depth, index, hashKey, 'li')\n    _liKeys = liKeys\n    item.li = liData\n  }\n\n  if (item.body) {\n    let body = [].concat(item.body)\n    let [bodyKeys, bodyData] = setItemKey(body, depth, index, hashKey, 'body')\n    _bodyKeys = bodyKeys\n    item.body = bodyData\n  }\n\n  if (item.footer) {\n    let footer = [].concat(item.footer)\n    let [ftKeys, ftData] = setItemKey(footer, depth, index, hashKey, 'footer')\n    _ftKeys = ftKeys\n    item.footer = ftData\n  }\n\n  if (item.dot) {\n    let dot = [].concat(item.dot)\n    let [dotKeys, dotData] = setItemKey(dot, depth, index, hashKey, 'dot')\n    _dotKeys = dotKeys\n    item.dot = dotData\n  }\n\n  const itemKeys = [..._liKeys, ..._bodyKeys, ..._ftKeys, ..._dotKeys]\n  return [itemKeys, item]\n}\n\nfunction App(opts){\n  const [treeKeys, treeInitData] = setItemKey(opts.props.data)\n  opts.props.data = treeInitData || []\n  const treeX = Aotoo(Tree, Actions, opts)\n  saveTreeKeys(treeX, treeKeys)\n  treeX.extend({\n    // 重写setProps方法\n    setProps: function (props = {}) {\n      if (props.data) {\n        const [treeKeys, treeInitData] = setItemKey(props.data)\n        props.data = treeInitData || []\n        saveTreeKeys(this, treeKeys)\n        this.config.props = props\n      }\n    },\n    // 重写setConfig方法\n    setConfig: function (config = {}) {\n      if (config.props && config.props.data) {\n        const [treeKeys, treeInitData] = setItemKey(config.props.data)\n        config.props.data = treeInitData || []\n        saveTreeKeys(this, treeKeys)\n        this.config = config\n      }\n    },\n    update: function(params) {\n      this.$update(params)\n    },\n    append: function(params) {\n      this.$append(params)\n    },\n    prepend: function(params) {\n      this.$prepend(params)\n    },\n    delete: function(params) {\n      this.$delete(params)\n    },\n    loading: function(params) {\n      this.$loading(params)\n    },\n    loaded: function(params) {\n      this.$loaded(params)\n    },\n    over: function(params) {\n      this.$over(params)\n    },\n    pulldown: function(params) {\n      this.$pulldown(params)\n    },\n    trigger: function(params) {\n      this.$trigger(params)\n    },\n    /**\n     * data {Array} 完整的数据\n     * idf  {String}  指定父级id\n     * feather  {Boolean}  true = 是否返回完整数据，false = 返回完整的ID\n     */\n    getGroups: function(data, idf, feather){\n      data = data||this.data||[]\n      idrecode = []\n      indexcode = []\n      const index = findIndex(data, o=>o.idf==idf)\n      indexcode.push(index)\n      let groups = _getGroups(data||[], idf)\n      // if (feather) return groups\n      if (feather) {\n        let temp = []\n        indexcode.forEach( $id => {\n          let sonFeather = data[$id]\n          sonFeather['__index'] = $id\n          temp.push(sonFeather)\n        })\n        return temp\n      }\n      return indexcode\n    },\n\n    getParents: function(data, idf){\n      data = data||this.data||[]\n      return findParents(data, idf)\n    },\n\n    findAndUpdate: function(query, target){\n      const data = this.data||[]\n      if (query) {\n        const index = findIndex(data, query)\n        if (index) {\n          this.dispach('UPDATE', {\n            index: index,\n            data: target\n          })\n        }\n      }\n    }\n  })\n  return treeX\n}\n\nexport default function tree(opts){\n  let dft = {\n    props: {\n      data: [],\n      loading: false,\n      header: '',\n      footer: '',\n      itemClass: '',\n      listClass: '',\n      itemMethod: ''\n    },\n    theme: '',\n    autoinject: true,\n    rendered: ''\n  }\n  dft = merge(dft, opts)\n  return App(dft)\n}\n\nexport function pure(opts){\n  return tree(opts)\n}\n"]}