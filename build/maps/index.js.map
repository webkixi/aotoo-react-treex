{"version":3,"sources":["index.js"],"names":["isArray","val","isFunction","isString","type","isObject","isDomElement","filter","bars","loading","isNumber","objTypeof","over","trigger","_getGroups","dataAry","idf","nsons","ostate","jj","opts","indexcode","push","o","parent","forEach","son","ii","idrecode","index","oriItem","data","oldKey","key","concat","updateTreeKeys","control","findParents","_parentIndex","myParents","LOADING","find","item","state","curState","p","content","oldkey","newKey","saxer","get","treeKeys","hashKey","splice","arguments","length","undefined","uniqueId","prefix","PULLDOWN","params","set","setItemKey","datas","depth","parentIndex","hkey","part","myData","myKeys","startIndex","getHashKey","valideIndex","itemKey","belong","keyItem","React","isValidElement","newItem","title","setSubItemKey","subItemKeys","sons","indexOf","_ftKeys","_dotKeys","li","_liKeys","liKeys","liData","body","_setItemKey9","_setItemKey10","_slicedToArray","bodyKeys","bodyData","_bodyKeys","footer","_setItemKey11","_setItemKey12","ftKeys","ftData","_setItemKey13","dot","_setItemKey14","dotKeys","dotData","itemKeys","_toConsumableArray","App","_setItemKey15","props","_setItemKey16","treeInitData","treeX","Aotoo","Tree","Actions","saveTreeKeys","extend","setProps","findIndex","_setItemKey17","_setItemKey18","this","config","setConfig","_setItemKey19","_setItemKey20","update","$append","prepend","$prepend","delete","$delete","$loading","loaded","start","$over","pulldown","temp","$id","sonFeather","getParents","findAndUpdate","query","target","dispach","tree","dft","header","itemClass","listClass","itemMethod","rendered","pure","list","transTree","merge","obj","createElement","className","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","preRender","bind","list_part","getBehaviorBar","Component","UPDATE","oriData","treeData","APPEND","_setItemKey3","_setItemKey4","oTreeKeys","DELETE","LOADED","appendData","PREPEND","prependData","TRIGGER"],"mappings":"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","file":"../index.js","sourcesContent":["\nconst {\n  list,\n  objTypeof,\n  transTree,\n  find,\n  findIndex,\n  merge,\n  isArray,\n  isFunction,\n  isString,\n  isObject,\n  isDomElement,\n  uniqueId,\n  filter\n} = Aotoo\n\nconst isNumber = function (obj) {\n  return objTypeof(obj) == 'Number'\n}\n\nconst bars = {\n    trigger:  <div className=\"treex-bar\"><div className=\"treex-trigger-bar\">加载更多内容</div></div>\n  , pulldown: <div className=\"treex-bar\"><div className=\"treex-pull-bar\">刷新页面</div></div>\n  , loading:  <div className=\"treex-bar\"><div className=\"treex-loading\">Loading...</div></div>\n  , over:     <div className=\"treex-bar\"><div className=\"treex-over-bar\">没有更多内容了</div></div>\n}\n\nfunction getBehaviorBar(type, val){\n  if (val) {\n    switch (type) {\n      case 'pulldown':\n        return val == true ? bars.pulldown : val\n        break;\n      case 'loading':\n        return val == true ? bars.loading : val\n        break;\n      case 'over':\n        return val == true ? bars.over : val\n        break;\n      case 'trigger':\n        return val == true ? bars.trigger : val\n        break;\n    }\n  }\n}\n\nclass Tree extends React.Component {\n  constructor(props){\n    super(props)\n    this.preRender = this::this.preRender\n    this.state = {\n      data: this.props.data || [],\n      pulldown: this.props.pulldown || false,\n      loading: this.props.loading || false,\n      trigger: this.props.trigger || false,\n      over: this.props.over || false\n    }\n  }\n\n  preRender(){\n    const header = this.props.header ? this.props.header : ''\n    const footer = this.props.footer ? this.props.footer : ''\n\n    const list_part = list({\n      data: transTree(this.state.data),\n      listClass: this.props.listClass,\n      itemClass: this.props.itemClass,\n      itemMethod: this.props.itemMethod\n    })\n\n    if (\n      header ||\n      footer ||\n      this.state.trigger ||\n      this.state.pulldown ||\n      this.state.loading ||\n      this.state.over\n    ) {\n      return (\n        <div className=\"list-container\">\n          {getBehaviorBar('pulldown', this.state.pulldown)}\n          {header}\n          {list_part}\n          {footer}\n          {getBehaviorBar('trigger', this.state.trigger)}\n          {getBehaviorBar('over', this.state.over)}\n          {getBehaviorBar('loading', this.state.loading)}\n        </div>\n      )\n    } else {\n      return list_part\n    }\n  }\n\n  render(){\n    return this.preRender()\n  }\n}\n\nconst Actions = {\n  UPDATE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n\n    const index = opts.index\n    if (!index && index!=0) {\n      if (isArray(opts.data)) {\n        const [treeKeys, treeData] = setItemKey(opts.data)\n        control.saxer.set('treeKeys', treeKeys||[])\n        state.data = treeData\n        return state\n      }\n    } else {\n      let oriData = data[index]\n      let oldKey = oriData.key\n      let newKey = getHashKey()\n      updateTreeKeys(control, oldKey, newKey)\n      state.data[index] = merge(oriData, opts.data, {key: newKey})\n      return state\n    }\n  },\n\n  APPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let appendData = [].concat(opts.data || [])\n    // appendData.startIndex = oTreeKeys.length\n\n    const [treeKeys, treeData] = setItemKey(appendData)\n    oTreeKeys = oTreeKeys.concat(treeKeys)\n    control.saxer.set('treeKeys', oTreeKeys||[])\n    data = data.concat(treeData)\n\n    state.data = data\n    return state\n  },\n\n  PREPEND: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n    let prependData = [].concat(opts.data || [])\n\n    const [treeKeys, treeData] = setItemKey(prependData)\n    oTreeKeys = treeKeys.concat(oTreeKeys)\n    \n    control.saxer.set('treeKeys', oTreeKeys||[])\n    data = treeData.concat(data)\n\n    state.data = data\n    return state\n  },\n\n  /*\n    opts:{\n      index: {number}\n      query: {Json}\n    }\n  */\n  DELETE: function(ostate, opts={}, control){\n    let state = this.curState\n    let data = state.data\n    let oTreeKeys = control.saxer.get('treeKeys')\n\n    if (opts.index || opts.index == 0) {\n      let oriItem = data[opts.index] \n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(opts.index, 1);\n      }\n    }\n    else if(opts.query) {\n      const index = findIndex(data, opts.query)\n      let oriItem = data[index]\n      let oldKey = oriItem.key\n      if (oriItem) {\n        updateTreeKeys(control, oldKey)\n        data.splice(index, 1)\n      }\n    }\n    state.data = data\n    return state\n  },\n\n  // ========== 状态控制 ===========\n\n  LOADING: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = opts.loading || true\n      state.pulldown = false\n    }\n    return state\n  },\n\n  LOADED: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = false\n      state.pulldown = false\n    }\n    return state\n  },\n\n  OVER: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.trigger = false\n    state.over = opts.over || true\n    return state\n  },\n\n  PULLDOWN: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.over = false\n    state.pulldown = opts.pulldown || true\n    return state\n  },\n\n  TRIGGER: function(ostate, opts={}){\n    if (!this||!this.state) return\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.over = false\n    state.trigger = opts.trigger || true\n    return state\n  },\n}\n\nlet idrecode = []\nlet indexcode = []\nfunction _getGroups(dataAry, idf){\n  let nsons = []\n\n  let sons = filter(dataAry, (o, jj) => {\n    if (o.parent == idf) {\n      indexcode.push(jj)\n      return o.parent == idf\n    }\n  })\n\n  sons.forEach( (son, ii) => {\n    if (son.idf && idrecode.indexOf(son.idf) == -1) {\n      idrecode.push(son.idf)\n      nsons = nsons.concat(son).concat(_getGroups(dataAry, son.idf))\n    } else {\n      nsons = nsons.concat(son)\n    }\n  })\n  return nsons\n}\n\n// let myParentsIndex = []\n// let myParents = []\n\n/**\n * [查找特定idf的数据，]\n * @param  {[type]} dataAry [description]\n * @param  {[type]} idf     [description]\n * @return {[type]}         [description]\n */\nfunction findParents(dataAry, idf){\n  let _parentIndex\n  const myParents = []\n  const item = find(dataAry, (o,ii)=>o.idf==idf)\n\n  if (item && item.parent) {\n    const p = find(dataAry, (o, ii)=>{\n      _parentIndex = ii\n      return o.idf==item.parent\n    })\n    if (p){\n      myParents.push({index: _parentIndex, content: p})\n      myParents.concat(findParents(dataAry, item.parent))\n    }\n  }\n  return myParents\n}\n\nfunction updateTreeKeys(control, oldkey, newKey) {\n  const treeKeys = control.saxer.get('treeKeys')\n  let ii = findIndex(treeKeys, {hashKey: oldkey})\n  if (newKey) {\n    treeKeys[ii].key = newKey\n  } else {\n    treeKeys.splice(ii, 1);\n  }\n}\n\nfunction valideIndex(index) {\n  return index || index == 0 ? true : false\n}\n\nfunction getHashKey(prefix=\"treex_\") {\n  return uniqueId(prefix)\n}\n\nfunction saveTreeKeys(control, params) {\n  params = params ? [].concat(params) : []\n  control.saxer.set('treeKeys', params)\n  // if (params.length) {\n  // }\n}\n\nfunction setItemKey(datas=[], depth=0, parentIndex, hkey, part) {\n  const myData = []\n  const myKeys = []\n  let start = datas.startIndex||0\n\n  for (let ii = 0, jj = start; ii < datas.length; ii++, jj++) {\n    let item = datas[ii]\n    const itemKey = getHashKey()\n    let keyItem = valideIndex(parentIndex)\n    // ? { index: jj, hashKey: itemKey, depth: depth, belong: { index: parentIndex, hashKey: hkey, part: part } }\n    ? { index: jj, hashKey: itemKey, depth: depth, belong: { hashKey: hkey, part: part } }\n    : { index: jj, hashKey: itemKey, depth: depth}\n    myKeys.push(keyItem)\n\n    if (isString(item) || isNumber(item) || React.isValidElement(item)) {\n      const newItem = {title: item, key: itemKey}\n      myData.push(newItem)\n    } \n    else if (isObject(item)) {\n      item.key = item.key||itemKey\n      const [subItemKeys, newItem] = setSubItemKey(item, jj, itemKey, ++depth)\n      myKeys.concat(subItemKeys)\n      myData.push(newItem)\n    }\n  }\n  \n  return [myKeys, myData]\n}\n\nfunction setSubItemKey(item, index, hashKey, depth) {\n  let _liKeys=[], _bodyKeys=[], _ftKeys=[], _dotKeys=[]\n  if (item.li) {\n    let li = [].concat(item.li)\n    let [liKeys, liData] = setItemKey(li, depth, index, hashKey, 'li')\n    _liKeys = liKeys\n    item.li = liData\n  }\n\n  if (item.body) {\n    let body = [].concat(item.body)\n    let [bodyKeys, bodyData] = setItemKey(body, depth, index, hashKey, 'body')\n    _bodyKeys = bodyKeys\n    item.body = bodyData\n  }\n\n  if (item.footer) {\n    let footer = [].concat(item.footer)\n    let [ftKeys, ftData] = setItemKey(footer, depth, index, hashKey, 'footer')\n    _ftKeys = ftKeys\n    item.footer = ftData\n  }\n\n  if (item.dot) {\n    let dot = [].concat(item.dot)\n    let [dotKeys, dotData] = setItemKey(dot, depth, index, hashKey, 'dot')\n    _dotKeys = dotKeys\n    item.dot = dotData\n  }\n\n  const itemKeys = [..._liKeys, ..._bodyKeys, ..._ftKeys, ..._dotKeys]\n  return [itemKeys, item]\n}\n\nfunction App(opts){\n  const [treeKeys, treeInitData] = setItemKey(opts.props.data)\n  opts.props.data = treeInitData || []\n  const treeX = Aotoo(Tree, Actions, opts)\n  saveTreeKeys(treeX, treeKeys)\n  treeX.extend({\n    // 重写setProps方法\n    setProps: function (props = {}) {\n      if (props.data) {\n        const [treeKeys, treeInitData] = setItemKey(props.data)\n        props.data = treeInitData || []\n        saveTreeKeys(this, treeKeys)\n        this.config.props = props\n      }\n    },\n    // 重写setConfig方法\n    setConfig: function (config = {}) {\n      if (config.props && config.props.data) {\n        const [treeKeys, treeInitData] = setItemKey(config.props.data)\n        config.props.data = treeInitData || []\n        saveTreeKeys(this, treeKeys)\n        this.config = config\n      }\n    },\n    update: function(params) {\n      this.$update(params)\n    },\n    append: function(params) {\n      this.$append(params)\n    },\n    prepend: function(params) {\n      this.$prepend(params)\n    },\n    delete: function(params) {\n      this.$delete(params)\n    },\n    loading: function(params) {\n      this.$loading(params)\n    },\n    loaded: function(params) {\n      this.$loaded(params)\n    },\n    over: function(params) {\n      this.$over(params)\n    },\n    pulldown: function(params) {\n      this.$pulldown(params)\n    },\n    trigger: function(params) {\n      this.$trigger(params)\n    },\n    /**\n     * data {Array} 完整的数据\n     * idf  {String}  指定父级id\n     * feather  {Boolean}  true = 是否返回完整数据，false = 返回完整的ID\n     */\n    getGroups: function(data, idf, feather){\n      data = data||this.data||[]\n      idrecode = []\n      indexcode = []\n      const index = findIndex(data, o=>o.idf==idf)\n      indexcode.push(index)\n      let groups = _getGroups(data||[], idf)\n      // if (feather) return groups\n      if (feather) {\n        let temp = []\n        indexcode.forEach( $id => {\n          let sonFeather = data[$id]\n          sonFeather['__index'] = $id\n          temp.push(sonFeather)\n        })\n        return temp\n      }\n      return indexcode\n    },\n\n    getParents: function(data, idf){\n      data = data||this.data||[]\n      return findParents(data, idf)\n    },\n\n    findAndUpdate: function(query, target){\n      const data = this.data||[]\n      if (query) {\n        const index = findIndex(data, query)\n        if (index) {\n          this.dispach('UPDATE', {\n            index: index,\n            data: target\n          })\n        }\n      }\n    }\n  })\n  return treeX\n}\n\nexport default function tree(opts){\n  let dft = {\n    props: {\n      data: [],\n      loading: false,\n      header: '',\n      footer: '',\n      itemClass: '',\n      listClass: '',\n      itemMethod: ''\n    },\n    theme: '',\n    autoinject: true,\n    rendered: ''\n  }\n  dft = merge(dft, opts)\n  return App(dft)\n}\n\nexport function pure(opts){\n  return tree(opts)\n}\n"]}