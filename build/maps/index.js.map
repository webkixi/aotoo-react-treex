{"version":3,"sources":["index.js"],"names":["getBehaviorBar","type","val","transTree","find","findIndex","merge","bars","pulldown","filter","loading","over","trigger","_getGroups","data","nsons","dataAry","o","jj","parent","idf","indexcode","push","LOADING","son","ii","opts","idrecode","indexOf","state","concat","curState","findParents","_parentIndex","item","myParents","index","content","p","Tree","Actions","this","TRIGGER","ostate","forEach","$id","sons","findAndUpdate","query","target","dispach","treeX","tree","header","itemClass","groups","listClass","itemMethod","temp","rendered","dft","App","getParents","pure","Aotoo","list","isArray","React","createElement","className","props","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","preRender","footer","list_part","Component","UPDATE","arguments","length","undefined","oriData","unshift","splice","APPEND","LOADED","PREPEND","DELETE"],"mappings":"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","file":"../index.js","sourcesContent":["\nconst {\n  list, \n  transTree,\n  find,\n  findIndex,\n  merge,\n  isArray,\n  filter\n} = Aotoo\n\nconst bars = {\n    trigger:  <div className=\"treex-bar\"><div className=\"treex-trigger-bar\">加载更多内容</div></div>\n  , pulldown: <div className=\"treex-bar\"><div className=\"treex-pull-bar\">刷新页面</div></div>\n  , loading:  <div className=\"treex-bar\"><div className=\"treex-loading\">Loading...</div></div>\n  , over:     <div className=\"treex-bar\"><div className=\"treex-over-bar\">没有更多内容了</div></div>\n}\n\nfunction getBehaviorBar(type, val){\n  switch (type) {\n    case 'pulldown':\n      if (val) {\n        return typeof val == 'boolean' ? bars.pulldown : val\n      }\n      break;\n    case 'loading':\n      if (val) {\n        return typeof val == 'boolean' ? bars.loading : val\n      }\n      break;\n    case 'over':\n      if (val) {\n        return typeof val == 'boolean' ? bars.over : val\n      }\n      break;\n    case 'trigger':\n      if (val) {\n        return typeof val == 'boolean' ? bars.trigger : val\n      }\n      break;\n  }\n}\n\nclass Tree extends React.Component {\n  constructor(props){\n    super(props)\n    this.preRender = this::this.preRender\n    this.state = {\n      data: this.props.data||[],\n      pulldown: false,\n      loading: false,\n      trigger: false,\n      over: false\n    }\n  }\n\n  preRender(){\n    const header = this.props.header ? this.props.header : ''\n    const footer = this.props.footer ? this.props.footer : ''\n\n    const list_part = list({\n      data: transTree(this.state.data),\n      listClass: this.props.listClass,\n      itemClass: this.props.itemClass,\n      itemMethod: this.props.itemMethod\n    })\n\n    if (\n      header ||\n      footer ||\n      this.state.trigger ||\n      this.state.pulldown ||\n      this.state.loading ||\n      this.state.over\n    ) {\n      return (\n        <div className=\"list-container\">\n          {getBehaviorBar('pulldown', this.state.pulldown)}\n          {header}\n          {list_part}\n          {footer}\n          {getBehaviorBar('trigger', this.state.trigger)}\n          {getBehaviorBar('over', this.state.over)}\n          {getBehaviorBar('loading', this.state.loading)}\n        </div>\n      )\n    } else {\n      return list_part\n    }\n  }\n\n  render(){\n    return this.preRender()\n  }\n}\n\nconst Actions = {\n  UPDATE: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    const index = opts.index\n    if (!index && index!=0) {\n      if ( isArray(opts.data) ) {\n        state.data = opts.data\n        return state\n      }\n    } else {\n      if (opts.query) {\n\n      }\n\n      let oriData = data[index]\n      oriData = merge(oriData, opts.data)\n      return state\n    }\n  },\n\n  APPEND: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (isArray(opts.data)) {\n      data = data.concat(opts.data)\n    } else {\n      data.push(opts.data)\n    }\n\n    return state\n  },\n\n  PREPEND: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (isArray(opts.data)) {\n      data = opts.data.concat(data)\n    } else {\n      data.unshift(opts.data)\n    }\n\n    return state\n  },\n\n  /*\n    opts:{\n      index: {number}\n      query: {Json}\n    }\n  */\n  DELETE: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (opts.index) {\n      data.splice(opts.index, 1);\n    }\n    else if(opts.query) {\n      const index = findIndex(data, opts.query)\n      if (index>-1) {\n        data.splice(index, 1)\n      }\n    }\n    return state\n  },\n\n  // ========== 状态控制 ===========\n\n  LOADING: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = opts.loading || true\n      state.pulldown = false\n    }\n    return state\n  },\n\n  LOADED: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = false\n      state.pulldown = false\n    }\n    return state\n  },\n\n  OVER: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.trigger = false\n    state.over = opts.over || true\n    return state\n  },\n\n  PULLDOWN: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.over = false\n    state.pulldown = opts.pulldown || true\n    return state\n  },\n\n  TRIGGER: function(ostate, opts={}){\n    if (!this||!this.state) return\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.over = false\n    state.trigger = opts.trigger || true\n    return state\n  },\n}\n\nlet idrecode = []\nlet indexcode = []\nfunction _getGroups(dataAry, idf){\n  let nsons = []\n\n  let sons = filter(dataAry, (o, jj) => {\n    if (o.parent == idf) {\n      indexcode.push(jj)\n      return o.parent == idf\n    }\n  })\n\n  sons.forEach( (son, ii) => {\n    if (son.idf && idrecode.indexOf(son.idf) == -1) {\n      idrecode.push(son.idf)\n      nsons = nsons.concat(_getGroups(dataAry, son.idf))\n    } else {\n      nsons = nsons.concat(son)\n    }\n  })\n  return nsons\n}\n\nlet myParentsIndex = []\nlet myParents = []\n\n/**\n * [查找特定idf的数据，]\n * @param  {[type]} dataAry [description]\n * @param  {[type]} idf     [description]\n * @return {[type]}         [description]\n */\nfunction findParents(dataAry, idf){\n  let _parentIndex\n  const item = find(dataAry, (o,ii)=>o.idf==idf)\n\n  if (item && item.parent) {\n    const p = find(dataAry, (o, ii)=>{\n      _parentIndex = ii\n      return o.idf==item.parent\n    })\n    if (p){\n      myParents.push({index: _parentIndex, content: p})\n      findParents(dataAry, item.parent)\n    }\n  }\n}\n\nfunction App(opts){\n  const treeX = Aotoo(Tree, Actions, opts)\n  treeX.extend({\n    getGroups: function(data, idf, son){\n      data = data||this.data||[]\n      idrecode = []\n      indexcode = []\n      const index = findIndex(data, o=>o.idf==idf)\n      indexcode.push(index)\n      let groups = _getGroups(data||[], idf)\n      // if (son) return groups\n      if (son) {\n        let temp = []\n        indexcode.forEach( $id => {\n          temp.push(data[$id])\n        })\n        return temp\n      }\n      return indexcode\n    },\n\n    getParents: function(data, idf){\n      data = data||this.data||[]\n      myParents = []\n      findParents(data, idf)\n      return myParents\n    },\n\n    findAndUpdate: function(query, target){\n      const data = this.data||[]\n      if (query) {\n        const index = findIndex(data, query)\n        if (index) {\n          this.dispach('UPDATE', {\n            index: index,\n            data: target\n          })\n        }\n      }\n    }\n  })\n  return treeX\n}\n\n\n\n/*\n [ {title: '', idf: 'aaa', index: 0},\n  {title: 'abcfd', parent: 'aaa', index: 1},\n  {title: 'bcasd', parent: 'aaa', index: 2},\n  {title: 'aacwq', parent: 'aaa', index: 2},\n\n  {title: <button>123</button>, idf: 'bbb', index: 3},\n  {title: 'yyufs', parent: 'bbb', index: 4},\n  {title: 'xfdsw', parent: 'bbb', index: 5},\n  {title: 'xxxdsehh', parent: 'bbb', index: 5}, ]\n*/\n\n\n/*\n  props: {\n    data: {Array},\n    loading: {Boolean || JSX }\n    header: {JSX},\n    footer: {JSX},\n    itemClass: {String},\n    listClass: {String},\n    itemMethod: {Function}   componentDidMount 后列表项响应事件\n  }\n  theme: {String}  注入样式\n  autoinject: {Boolean} 是否自动注入\n  rendered: {Function} 渲染完成后的动作，在原生react 的 componentDidMount 后\n*/\n\nexport default function tree(opts){\n  let dft = {\n    props: {\n      data: [],\n      loading: false,\n      header: '',\n      footer: '',\n      itemClass: '',\n      listClass: '',\n      itemMethod: ''\n    },\n    theme: '',\n    autoinject: true,\n    rendered: ''\n  }\n  dft = merge(dft, opts)\n  return App(dft)\n}\n\nexport function pure(opts){\n  return tree(opts)\n}\n"]}