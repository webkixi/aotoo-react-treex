{"version":3,"sources":["index.js"],"names":["getBehaviorBar","type","val","transTree","find","findIndex","merge","bars","pulldown","filter","loading","trigger","over","data","opts","idf","nsons","state","index","dataAry","o","jj","indexcode","push","parent","forEach","son","ii","idrecode","indexOf","LOADING","concat","_getGroups","curState","findParents","_parentIndex","item","OVER","ostate","content","p","treeX","Aotoo","Tree","Actions","getGroups","feather","TRIGGER","this","$id","sonFeather","temp","getParents","myParents","findAndUpdate","target","query","dispach","tree","header","itemClass","groups","listClass","itemMethod","autoinject","dft","App","pure","list","isArray","React","createElement","className","props","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","preRender","bind","footer","list_part","Component","UPDATE","arguments","length","undefined","oriData","APPEND","unshift","DELETE","LOADED","PREPEND","myParentsIndex"],"mappings":"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","file":"../index.js","sourcesContent":["\nconst {\n  list, \n  transTree,\n  find,\n  findIndex,\n  merge,\n  isArray,\n  filter\n} = Aotoo\n\nconst bars = {\n    trigger:  <div className=\"treex-bar\"><div className=\"treex-trigger-bar\">加载更多内容</div></div>\n  , pulldown: <div className=\"treex-bar\"><div className=\"treex-pull-bar\">刷新页面</div></div>\n  , loading:  <div className=\"treex-bar\"><div className=\"treex-loading\">Loading...</div></div>\n  , over:     <div className=\"treex-bar\"><div className=\"treex-over-bar\">没有更多内容了</div></div>\n}\n\nfunction getBehaviorBar(type, val){\n  if (val) {\n    switch (type) {\n      case 'pulldown':\n        return val == true ? bars.pulldown : val\n        break;\n      case 'loading':\n        return val == true ? bars.loading : val\n        break;\n      case 'over':\n        return val == true ? bars.over : val\n        break;\n      case 'trigger':\n        return val == true ? bars.trigger : val\n        break;\n    }\n  }\n}\n\nclass Tree extends React.Component {\n  constructor(props){\n    super(props)\n    this.preRender = this::this.preRender\n    this.state = {\n      data: this.props.data||[],\n      pulldown: false,\n      loading: false,\n      trigger: false,\n      over: false\n    }\n  }\n\n  preRender(){\n    const header = this.props.header ? this.props.header : ''\n    const footer = this.props.footer ? this.props.footer : ''\n\n    const list_part = list({\n      data: transTree(this.state.data),\n      listClass: this.props.listClass,\n      itemClass: this.props.itemClass,\n      itemMethod: this.props.itemMethod\n    })\n\n    if (\n      header ||\n      footer ||\n      this.state.trigger ||\n      this.state.pulldown ||\n      this.state.loading ||\n      this.state.over\n    ) {\n      return (\n        <div className=\"list-container\">\n          {getBehaviorBar('pulldown', this.state.pulldown)}\n          {header}\n          {list_part}\n          {footer}\n          {getBehaviorBar('trigger', this.state.trigger)}\n          {getBehaviorBar('over', this.state.over)}\n          {getBehaviorBar('loading', this.state.loading)}\n        </div>\n      )\n    } else {\n      return list_part\n    }\n  }\n\n  render(){\n    return this.preRender()\n  }\n}\n\nconst Actions = {\n  UPDATE: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    const index = opts.index\n    if (!index && index!=0) {\n      if ( isArray(opts.data) ) {\n        state.data = opts.data\n        return state\n      }\n    } else {\n      let oriData = data[index]\n      oriData = merge(oriData, opts.data)\n      return state\n    }\n  },\n\n  APPEND: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (isArray(opts.data)) {\n      data = data.concat(opts.data)\n    } else {\n      data.push(opts.data)\n    }\n\n    return state\n  },\n\n  PREPEND: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (isArray(opts.data)) {\n      data = opts.data.concat(data)\n    } else {\n      data.unshift(opts.data)\n    }\n\n    return state\n  },\n\n  /*\n    opts:{\n      index: {number}\n      query: {Json}\n    }\n  */\n  DELETE: function(ostate, opts={}){\n    let state = this.curState\n    let data = state.data\n\n    if (opts.index || opts.index == 0) {\n      data.splice(opts.index, 1);\n    }\n    else if(opts.query) {\n      const index = findIndex(data, opts.query)\n      if (index>-1) {\n        data.splice(index, 1)\n      }\n    }\n    return state\n  },\n\n  // ========== 状态控制 ===========\n\n  LOADING: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = opts.loading || true\n      state.pulldown = false\n    }\n    return state\n  },\n\n  LOADED: function(ostate, opts={}){\n    let state = this.curState\n    if (!state.over) {\n      state.loading = false\n      state.pulldown = false\n    }\n    return state\n  },\n\n  OVER: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.trigger = false\n    state.over = opts.over || true\n    return state\n  },\n\n  PULLDOWN: function(ostate, opts={}){\n    let state = this.curState\n    state.loading = false\n    state.over = false\n    state.pulldown = opts.pulldown || true\n    return state\n  },\n\n  TRIGGER: function(ostate, opts={}){\n    if (!this||!this.state) return\n    let state = this.curState\n    state.loading = false\n    state.pulldown = false\n    state.over = false\n    state.trigger = opts.trigger || true\n    return state\n  },\n}\n\nlet idrecode = []\nlet indexcode = []\nfunction _getGroups(dataAry, idf){\n  let nsons = []\n\n  let sons = filter(dataAry, (o, jj) => {\n    if (o.parent == idf) {\n      indexcode.push(jj)\n      return o.parent == idf\n    }\n  })\n\n  sons.forEach( (son, ii) => {\n    if (son.idf && idrecode.indexOf(son.idf) == -1) {\n      idrecode.push(son.idf)\n      nsons = nsons.concat(son).concat(_getGroups(dataAry, son.idf))\n    } else {\n      nsons = nsons.concat(son)\n    }\n  })\n  return nsons\n}\n\nlet myParentsIndex = []\nlet myParents = []\n\n/**\n * [查找特定idf的数据，]\n * @param  {[type]} dataAry [description]\n * @param  {[type]} idf     [description]\n * @return {[type]}         [description]\n */\nfunction findParents(dataAry, idf){\n  let _parentIndex\n  const item = find(dataAry, (o,ii)=>o.idf==idf)\n\n  if (item && item.parent) {\n    const p = find(dataAry, (o, ii)=>{\n      _parentIndex = ii\n      return o.idf==item.parent\n    })\n    if (p){\n      myParents.push({index: _parentIndex, content: p})\n      findParents(dataAry, item.parent)\n    }\n  }\n}\n\nfunction App(opts){\n  const treeX = Aotoo(Tree, Actions, opts)\n  treeX.extend({\n    /**\n     * data {Array} 完整的数据\n     * idf  {String}  指定父级id\n     * feather  {Boolean}  true = 是否返回完整数据，false = 返回完整的ID\n     */\n    getGroups: function(data, idf, feather){\n      data = data||this.data||[]\n      idrecode = []\n      indexcode = []\n      const index = findIndex(data, o=>o.idf==idf)\n      indexcode.push(index)\n      let groups = _getGroups(data||[], idf)\n      // if (feather) return groups\n      if (feather) {\n        let temp = []\n        indexcode.forEach( $id => {\n          let sonFeather = data[$id]\n          sonFeather['__index'] = $id\n          temp.push(sonFeather)\n        })\n        return temp\n      }\n      return indexcode\n    },\n\n    getParents: function(data, idf){\n      data = data||this.data||[]\n      myParents = []\n      findParents(data, idf)\n      return myParents\n    },\n\n    findAndUpdate: function(query, target){\n      const data = this.data||[]\n      if (query) {\n        const index = findIndex(data, query)\n        if (index) {\n          this.dispach('UPDATE', {\n            index: index,\n            data: target\n          })\n        }\n      }\n    }\n  })\n  return treeX\n}\n\n\n\n/*\n [ {title: '', idf: 'aaa', index: 0},\n  {title: 'abcfd', parent: 'aaa', index: 1},\n  {title: 'bcasd', parent: 'aaa', index: 2},\n  {title: 'aacwq', parent: 'aaa', index: 2},\n\n  {title: <button>123</button>, idf: 'bbb', index: 3},\n  {title: 'yyufs', parent: 'bbb', index: 4},\n  {title: 'xfdsw', parent: 'bbb', index: 5},\n  {title: 'xxxdsehh', parent: 'bbb', index: 5}, ]\n*/\n\n\n/*\n  props: {\n    data: {Array},\n    loading: {Boolean || JSX }\n    header: {JSX},\n    footer: {JSX},\n    itemClass: {String},\n    listClass: {String},\n    itemMethod: {Function}   componentDidMount 后列表项响应事件\n  }\n  theme: {String}  注入样式\n  autoinject: {Boolean} 是否自动注入\n  rendered: {Function} 渲染完成后的动作，在原生react 的 componentDidMount 后\n*/\n\nexport default function tree(opts){\n  let dft = {\n    props: {\n      data: [],\n      loading: false,\n      header: '',\n      footer: '',\n      itemClass: '',\n      listClass: '',\n      itemMethod: ''\n    },\n    theme: '',\n    autoinject: true,\n    rendered: ''\n  }\n  dft = merge(dft, opts)\n  return App(dft)\n}\n\nexport function pure(opts){\n  return tree(opts)\n}\n"]}